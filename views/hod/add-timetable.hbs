<section>
  <div class="container py-5 border bg-light rounded-lg shadow-sm">
    {{#if period}}

      <h2 class="text-center mb-4 text-primary">Create Timetable</h2>

      {{#if day}}
      <div class="alert alert-success mb-4 {{year}}">
        <strong>{{year}} {{day}}</strong> timetable created successfully!
      </div>
      {{/if}}

      <!-- Display Error or Existing Timetable Entries -->
      {{#if errorMessage}}
      <div class="alert alert-danger mb-4">
        <strong>Error:</strong> {{errorMessage}}
      </div>
      {{/if}}

      {{#if existingEntries}}
      <div class="alert alert-warning mb-4">
        <strong>Some timetable entries already exist:</strong>
        <ul>
          {{#each existingEntries}}
            <li>{{this.course}} - {{this.subject}} with {{this.teacher}} at {{this.time}} ({{this.email}})</li>
          {{/each}}
        </ul>
      </div>
      {{/if}}

      <div class="row justify-content-center">
        <div class="col-md-10 col-lg-8">
          <form action="/hod/add-timetable" method="POST">

            <!-- Course Selection -->
            <div class="mb-4">
              <label for="course" class="form-label fw-bold text-secondary">Course</label>
              <select id="course" name="course" class="form-select border-secondary bg-light" required>
                <option value="">Choose a course</option>
                {{#each courses}}
                <option value="{{this}}">{{this}}</option>
                {{/each}}
              </select>
            </div>

            <!-- Semester Selection -->
            <div class="mb-4">
              <label class="form-label fs-5 text-dark">Select Semester</label>
              <select class="form-select custom-select" name="semester" required>
                <option value="">Choose Semester</option>
                {{#each classTeachers}}
                <option value="{{this}}">{{this}}</option>
                {{/each}}
              </select>
            </div>

            <!-- Day Selection -->
            <div class="mb-4">
              <label for="daySelect" class="form-label fs-5 text-dark">Day</label>
              <select id="daySelect" class="form-select custom-select" name="day" required>
                <option value="">Choose a day...</option>
                <option value="monday">Monday</option>
                <option value="tuesday">Tuesday</option>
                <option value="wednesday">Wednesday</option>
                <option value="thursday">Thursday</option>
                <option value="friday">Friday</option>
              </select>
            </div>

            {{#each period}}
            <div id="periodSection">
              <!-- Period Details -->
              <div class="time-slot mb-4 border p-4 rounded shadow-sm">
                <h5 class="text-secondary mb-3">{{this.period_name}}</h5>

                <!-- Period Time Input -->
                <div class="mb-3">
                  <label for="period{{@index}}" class="form-label">Period Time</label>
                  <input type="text" name="periods" id="period{{@index}}" class="form-control" value="{{this.time}}" readonly>
                </div>

                <div class="mb-3">
                  <label class="form-label fs-5">Teacher</label>
                  <select id="teacherDropdown{{@index}}" class="form-select custom-select" name="teachers" required>
                    <option value="">Choose a teacher...</option>
                    {{#each ../teachersInfo}} <!-- Use ../ to reference the teachersInfo in the parent context -->
                    <option value="{{this.name}}" data-email="{{this.email}}" data-subjects="{{this.subjects}}">
                      {{this.name}}
                    </option>
                    {{else}}
                    <option disabled>No teachers available</option>
                    {{/each}}
                  </select>

                  <!-- Hidden email input field -->
                  <input type="hidden" name="teacherEmails" id="teacherEmailInput{{@index}}">
                </div>

                <!-- Subject Dropdown -->
                <div class="mb-3">
                  <label for="subjectDropdown{{@index}}" class="form-label fs-5">Subject</label>
                  <select id="subjectDropdown{{@index}}" class="form-select custom-select" name="subjects" required>
                    <option value="">Choose a subject...</option>
                  </select>
                </div>
              </div>
            </div>
            {{/each}}

            <!-- Submit Button -->
            <div class="text-center">
              <button type="submit" class="btn btn-primary btn-lg">Submit Timetable</button>
            </div>
          </form>
        </div>
      </div>

    {{else}}

      {{#if errorMessage}}
      <div class="card border-danger mb-4">
        <div class="card-body text-danger">
          <h5 class="card-title">
            <i class="bi bi-exclamation-triangle-fill me-2"></i> Error
          </h5>
          <p class="card-text">The timetable is already exist...</p>
          <a href="/hod/add-timetable" class="btn btn-danger btn-sm">
            <i class="bi bi-arrow-repeat"></i> Retry
          </a>
        </div>
      </div>
      {{else}}

      <h2 class="text-center mb-4 text-primary">Set Period Times</h2>

      <!-- Form to Set Period Times -->
      <div id="setPeriodsSection" class="card shadow-lg p-4">
        <form id="periodForm" action="/hod/set-timetable" method="post">
          <div id="periodContainer">
            <!-- Table for Periods -->
            <table class="table table-striped table-hover">
              <thead class="thead-dark">
                <tr>
                  <th>Period</th>
                  <th>Start Time</th>
                  <th>End Time</th>
                  <th>Actions</th>
                </tr>
              </thead>
              <tbody id="periodRows">
                <tr>
                  <td>Period 1</td>
                  <td>
                    <div class="d-flex">
                      <input type="number" name="startHour1" class="form-control me-2" min="1" max="12" placeholder="HH" required>
                      <input type="number" name="startMinute1" class="form-control me-2" min="0" max="59" placeholder="MM" required>
                      <select name="startAmPm1" class="form-select" required>
                        <option value="AM">AM</option>
                        <option value="PM">PM</option>
                      </select>
                    </div>
                  </td>
                  <td>
                    <div class="d-flex">
                      <input type="number" name="endHour1" class="form-control me-2" min="1" max="12" placeholder="HH" required>
                      <input type="number" name="endMinute1" class="form-control me-2" min="0" max="59" placeholder="MM" required>
                      <select name="endAmPm1" class="form-select" required>
                        <option value="AM">AM</option>
                        <option value="PM">PM</option>
                      </select>
                    </div>
                  </td>
                  <td>
                    <button type="button" class="btn btn-danger remove-period" disabled>Remove</button>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>

          <!-- Add Period Button -->
          <button type="button" id="addPeriodBtn" class="btn btn-success ">Add Period</button>

          <!-- Save Periods Button -->
          <button type="submit" id="savePeriodsBtn" class="btn btn-primary">Save Periods</button>
        </form>
      </div>
      {{/if}}

    {{/if}}
  </div>
</section>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const periodRows = document.getElementById('periodRows');
    const addPeriodBtn = document.getElementById('addPeriodBtn');
    const setPeriodsSection = document.getElementById('setPeriodsSection');
    const createTimetableSection = document.getElementById('createTimetableSection');

    // Add a new period row
    addPeriodBtn.addEventListener('click', () => {
      const periodCount = periodRows.children.length + 1;
      const newRow = document.createElement('tr');
      newRow.innerHTML = `
        <td>Period ${periodCount}</td>
        <td>
          <div class="d-flex">
            <input type="number" name="startHour${periodCount}" class="form-control me-2" min="1" max="12" placeholder="HH" required>
            <input type="number" name="startMinute${periodCount}" class="form-control me-2" min="0" max="59" placeholder="MM" required>
            <select name="startAmPm${periodCount}" class="form-select" required>
              <option value="AM">AM</option>
              <option value="PM">PM</option>
            </select>
          </div>
        </td>
        <td>
          <div class="d-flex">
            <input type="number" name="endHour${periodCount}" class="form-control me-2" min="1" max="12" placeholder="HH" required>
            <input type="number" name="endMinute${periodCount}" class="form-control me-2" min="0" max="59" placeholder="MM" required>
            <select name="endAmPm${periodCount}" class="form-select" required>
              <option value="AM">AM</option>
              <option value="PM">PM</option>
            </select>
          </div>
        </td>
        <td>
          <button type="button" class="btn btn-danger remove-period">Remove</button>
        </td>
      `;
      periodRows.appendChild(newRow);
    });

    // Remove a period row
    periodRows.addEventListener('click', (e) => {
      if (e.target.classList.contains('remove-period')) {
        e.target.closest('tr').remove();
      }
    });

    // Handle form submission to gather and submit period data
    document.getElementById('periodForm').addEventListener('submit', (e) => {
      e.preventDefault();

      const periodData = [];
      periodRows.querySelectorAll('tr').forEach((row, index) => {
        const startHour = row.querySelector(`[name="startHour${index + 1}"]`).value;
        const startMinute = row.querySelector(`[name="startMinute${index + 1}"]`).value;
        const startAmPm = row.querySelector(`[name="startAmPm${index + 1}"]`).value;

        const endHour = row.querySelector(`[name="endHour${index + 1}"]`).value;
        const endMinute = row.querySelector(`[name="endMinute${index + 1}"]`).value;
        const endAmPm = row.querySelector(`[name="endAmPm${index + 1}"]`).value;

        const startTime = `${startHour.padStart(2, '0')}:${startMinute.padStart(2, '0')} ${startAmPm}`;
        const endTime = `${endHour.padStart(2, '0')}:${endMinute.padStart(2, '0')} ${endAmPm}`;

        periodData.push({
          period_name: `Period ${index + 1}`,
          time: `${startTime} - ${endTime}`,
        });
      });

      savePeriodsData(periodData);
    });

    // AJAX function to save the period data
    function savePeriodsData(periodData) {
      $.ajax({
        url: '/hod/set-timetable',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify({ periods: periodData }),
        success: function (response) {
          alert(response.message || 'Periods saved successfully!');
          if (response.success) {
            // Reload the page and hide/show relevant sections
            window.location.reload();
          }
        },
        error: function (xhr, status, error) {
          console.error('Error saving periods:', error);
          alert('Failed to save periods. Please try again.');
        },
      });
    }
  });
</script>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Select all teacher dropdowns and subject dropdowns
    const teacherDropdowns = document.querySelectorAll('.form-select.custom-select[name="teachers"]');
    const subjectDropdowns = document.querySelectorAll('.form-select.custom-select[name="subjects"]');

    // Function to update the hidden email input when a teacher is selected
    teacherDropdowns.forEach((teacherDropdown, index) => {
      const emailInput = document.getElementById(`teacherEmailInput${index}`);

      teacherDropdown.addEventListener('change', () => {
        const selectedOption = teacherDropdown.options[teacherDropdown.selectedIndex];
        const email = selectedOption.getAttribute('data-email');
        
        // Set the email value to the hidden input
        emailInput.value = email;
      });
    });

    // Function to update the subject dropdown based on selected teacher
    function updateSubjectDropdown(teacherDropdown, subjectDropdown) {
      // Clear the current subjects in the dropdown
      subjectDropdown.innerHTML = '<option value="">Choose a subject...</option>';

      const selectedTeacher = teacherDropdown.options[teacherDropdown.selectedIndex];
      const subjects = selectedTeacher.getAttribute('data-subjects');

      if (subjects) {
        const subjectList = subjects.split(','); // Split by comma

        // Add subjects to the subject dropdown
        subjectList.forEach(subject => {
          const option = document.createElement('option');
          option.value = subject.trim();
          option.textContent = subject.trim();
          subjectDropdown.appendChild(option);
        });
      }
    }

    // Add event listeners to teacher dropdowns to update corresponding subject dropdowns
    teacherDropdowns.forEach((teacherDropdown, index) => {
      const subjectDropdown = subjectDropdowns[index];
      teacherDropdown.addEventListener('change', function () {
        updateSubjectDropdown(teacherDropdown, subjectDropdown);
      });
    });
  });
</script>




<style>
  .custom-select,
  .custom-input {
    max-width: 100%;
  }

  .time-slot {
    background-color: #f9f9f9;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    border-radius: 8px;
    padding: 1.5rem;
  }

  .time-slot h5 {
    color: #333;
  }

  .btn-outline-success {
    color: #28a745;
    border-color: #28a745;
  }

  .btn-outline-danger {
    color: #dc3545;
    border-color: #dc3545;
  }

  .btn-outline-success:hover,
  .btn-outline-danger:hover {
    background-color: #f1f1f1;
  }

  .btn-primary {
    background-color: #007bff;
    border-color: #007bff;
  }

  .btn-primary:hover {
    background-color: #0056b3;
    border-color: #0056b3;
  }

  .form-label {
    font-weight: 500;
  }

  .form-select {
    font-size: 1rem;
  }

  .alert {
    font-size: 1.1rem;
    padding: 1rem;
  }
</style>